namespace = situation_operation

@StealResourcesTimer = 5400
@StealResourcesAmountMonths = 24

## Steal Resources, Stage 1 ##
espionage_operation_event = {
	id = situation_operation.1100
	title = situation_operation.1100.name
	desc = situation_operation.1100.desc
	picture = GFX_evt_sabotaged_ship
	show_sound = event_default
	is_triggered_only = yes
	espionage_operation = yes

	option = {
		name = UNFORTUNATE
		trigger = {
			NOT = { exists = event_target:easy }
			NOT = { exists = event_target:norm }
			NOT = { exists = event_target:hard }
		}
		destroy_espionage_operation = this
	}

	option = {
		name = situation_operation.1100.option.easy
		trigger = { exists = event_target:easy }
		hidden_effect = {
			event_target:easy = { save_event_target_as = operation_target }
			set_espionage_operation_flag = difficulty_easy
		}
	}

	option = {
		name = situation_operation.1100.option.norm
		trigger = { exists = event_target:norm }
		hidden_effect = {
			event_target:norm = { save_event_target_as = operation_target }
			set_espionage_operation_flag = difficulty_norm
		}
	}

	option = {
		name = situation_operation.1100.option.hard
		trigger = { exists = event_target:hard }
		hidden_effect = {
			event_target:hard = { save_event_target_as = operation_target }
			set_espionage_operation_flag = difficulty_hard
		}
	}

	immediate = {
		# Stop operations rolls until option is picked.
		set_espionage_operation_progress_locked = yes
		# Select planets to give as options to the player.
		from = {
			random_planet_within_border = {
				limit = {
					is_owned_by = from
					is_capital = no
					num_pops <= 25
				}
				# Save as event target for option.
				save_event_target_as = easy
				# Set the planet's score for display.
				set_variable = {
					which = espsit_steal_resources_score
					value = value:espsit_steal_resources_score|SCOPE|this|DIV|10|
				}
			}
			random_planet_within_border = {
				# Select a random medium-difficulty planet.
				limit = {
					is_owned_by = from
					is_capital = no
					OR = {
						NOT = { exists = event_target:easy }
						NOT = { is_planet = event_target:easy }
					}
					num_pops > 25
					num_pops < 75
				}
				# Save as event target for option.
				save_event_target_as = norm
				# Set the planet's score for display.
				set_variable = {
					which = espsit_steal_resources_score
					value = value:espsit_steal_resources_score|SCOPE|this|DIV|10|
				}
			}
			random_planet_within_border = {
				limit = {
					is_owned_by = from
					OR = {
						NOT = { exists = event_target:easy }
						NOT = { is_planet = event_target:easy }
					}
					OR = {
						NOT = { exists = event_target:norm }
						NOT = { is_planet = event_target:norm }
					}
					OR = {
						num_pops >= 75
						is_capital = yes
					}
				}
				# Save as event target for option.
				save_event_target_as = hard
				# Set the planet's score for display.
				set_variable = {
					which = espsit_steal_resources_score
					value = value:espsit_steal_resources_score|SCOPE|this|DIV|10|
				}
			}
		}
	}

	after = {
		event_target:operation_target = {
			# Set flags on the target planet.
			hidden_effect = {
				set_planet_flag = operation_target@root
			}
		}
		# Start operation rolls.
		set_espionage_operation_progress_locked = no
	}
}

## Steal Resources, Stage 2 ##
espionage_operation_event = {
	id = situation_operation.1200
	title = situation_operation.1200.name
	desc = situation_operation.1200.desc
	picture = GFX_evt_sabotaged_ship
	show_sound = event_default
	is_triggered_only = yes
	espionage_operation = yes

	option = {
		name = LAUNCH_OPERATION
	}

	immediate = {
		# Stop operations rolls until option is picked.
		set_espionage_operation_progress_locked = yes
		# Save flagged planet as event scope for localization.
		from = {
			random_owned_planet = {
				limit = { has_planet_flag = operation_target@root }
				save_event_target_as = operation_target
			}
		}
	}

	after = {
		# Start the situation on the enemy planet.
		event_target:operation_target.owner = {
			start_situation = {
				type = situation_espionage_resources
				target = event_target:operation_target
				effect = {
					# Set flags for going between the situation and operation.
					set_situation_flag = espionage_situation@root
					root = { set_espionage_operation_flag = espionage_attacker@prev }
					# Set the situation's difficulty.
					if = {
						limit = { root = { has_espionage_operation_flag = difficulty_easy } }
						set_situation_flag = difficulty_easy
					}
					else_if = {
						limit = { root = { has_espionage_operation_flag = difficulty_norm } }
						set_situation_flag = difficulty_norm
					}
					else_if = {
						limit = { root = { has_espionage_operation_flag = difficulty_hard } }
						set_situation_flag = difficulty_hard
					}
					# Open the situation window for the defender.
					save_event_target_as = espionage_situation
					event_target:operation_target = {
						planet_event = { id = situation_operation.1201 }
					}
				}
			}
		}
		# Start operation rolls.
		set_espionage_operation_progress_locked = no
	}
}

## Steal Resources, Stage 2: Defender Window ##
planet_event = {
	id = situation_operation.1201
	title = situation_operation.1201.name
	desc = situation_operation.1201.desc
	picture = GFX_evt_ship_offloading_cargo
	show_sound = event_ship_bridge
	is_triggered_only = yes

	immediate = {
		event_target:espionage_situation.target = {
			save_event_target_as = operation_target
		}
	}

	# (basic, replace civic) Do Nothing
	option = {
		name = situation_operation.1201.option.nothing
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_nothing
		}
		trigger = {
			owner = {
				has_espionage_situation_resources_civic_approach = no
			}
		}
	}

	# (basic, replace ethic) Weak Response
	option = {
		name = situation_operation.1201.option.basic_weak
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_basic_weak
		}
		trigger = {
			owner = {
				has_espionage_situation_resources_ethic_approach = no
			}
		}
	}

	# (basic, replace ethic) Strong Response
	option = {
		name = situation_operation.1201.option.basic_strong
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_basic_strong
		}
		trigger = {
			owner = {
				has_espionage_situation_resources_ethic_approach = no
			}
		}
	}

	# (ethic) Authoritarian, weak
	option = {
		name = situation_operation.1201.option.weak_police
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_weak_police
		}
		trigger = {
			owner = { can_espionage_situation_approach_ethic_authoritarian = yes }
		}
	}

	# (ethic) Authoritarian, strong
	option = {
		name = situation_operation.1201.option.strong_police
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_strong_police
		}
		trigger = {
			owner = { can_espionage_situation_approach_ethic_authoritarian = yes }
		}
	}

	# (ethic) Egalitarian, weak
	option = {
		name = situation_operation.1201.option.weak_task_force
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_weak_task_force
		}
		trigger = {
			owner = { can_espionage_situation_approach_ethic_egalitarian = yes }
		}
	}

	# (ethic) Egalitarian, strong
	option = {
		name = situation_operation.1201.option.strong_task_force
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_strong_task_force
		}
		trigger = {
			owner = { can_espionage_situation_approach_ethic_egalitarian = yes }
		}
	}

	# (ethic) Militarist, weak
	option = {
		name = situation_operation.1201.option.weak_soldiers
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_weak_soldiers
		}
		trigger = {
			owner = { can_espionage_situation_approach_ethic_militarist = yes }
		}
	}

	# (ethic) Militarist, strong
	option = {
		name = situation_operation.1201.option.strong_soldiers
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_strong_soldiers
		}
		trigger = {
			owner = { can_espionage_situation_approach_ethic_militarist = yes }
		}
	}

	# (ethic) Pacifist, weak
	option = {
		name = situation_operation.1201.option.weak_counter
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_weak_counter
		}
		trigger = {
			owner = { can_espionage_situation_approach_ethic_pacifist = yes }
		}
	}

	# (ethic) Pacifist, strong
	option = {
		name = situation_operation.1201.option.strong_counter
		event_target:espionage_situation = {
			set_situation_approach = situation_espionage_resources_approach_strong_counter
		}
		trigger = {
			owner = { can_espionage_situation_approach_ethic_pacifist = yes }
		}
	}

}

## Steal Resources, Result Stage ##
espionage_operation_event = {
	id = situation_operation.1900
	title = situation_operation.1900.name
	desc = situation_operation.1900.desc
	picture = GFX_evt_sabotaged_ship
	show_sound = event_espionage_concluded
	is_triggered_only = yes

	option = {
		name = situation_operation.1900.option.fail
		trigger = {
			NOT = { exists = event_target:espionage_situation }
		}
	}

	option = {
		name = situation_operation.1900.option.take
		allow = {
			exists = event_target:espionage_situation
		}
	}

	option = {
		name = situation_operation.1900.option.destroy
		allow = {
			exists = event_target:espionage_situation
			event_target:espionage_situation = { situation_progress < 50 }
		}
	}

	immediate = {
		# Save flagged planet as event scope for localization.
		from = {
			random_owned_planet = {
				limit = { has_planet_flag = operation_target@root }
				save_event_target_as = operation_target
			}
			random_situation = {
				limit = { has_situation_flag = espionage_situation@root }
				save_event_target_as = espionage_situation
			}
		}
	}

	after = {
		# Delay repeating this operation.
		spynetwork = {
			set_saved_date = {
				key = recently_stole_resources
				days_from_present = @StealResourcesTimer
				expires = @StealResourcesTimer
			}
		}
		# If situation does not exist, assume it was completed.
		if = {
			limit = { exists = event_target:espionage_situation }
			# Add resources based on situation multiplier.
			root.owner = {
				add_resource = {
					energy = @StealResourcesAmountMonths
					mult = value:espsit_planet_energy|SCOPE|event_target:operation_target|MULT|value:espionage_situation_multiplier|
				}
				add_resource = {
					minerals = @StealResourcesAmountMonths
					mult = value:espsit_planet_minerals|SCOPE|event_target:operation_target|MULT|value:espionage_situation_multiplier|
				}
				add_resource = {
					food = @StealResourcesAmountMonths
					mult = value:espsit_planet_food|SCOPE|event_target:operation_target|MULT|value:espionage_situation_multiplier|
				}
				add_resource = {
					alloys = @StealResourcesAmountMonths
					mult = value:espsit_planet_alloys|SCOPE|event_target:operation_target|MULT|value:espionage_situation_multiplier|
				}
				add_resource = {
					consumer_goods = @StealResourcesAmountMonths
					mult = value:espsit_planet_consumer_goods|SCOPE|event_target:operation_target|MULT|value:espionage_situation_multiplier|
				}
			}
			# End the defender's situation.
			abort_situation = event_target:espionage_situation
		}
		# Random chance to destroy asset.
		random_list = {
			# Keep all assets.
			50 = {
				modifier = {
					factor = 0
					has_espionage_operation_flag = difficulty_hard
				}
			}
			# Destroy an asset.
			0 = {
				modifier = {
					add = 50
					has_espionage_asset_subterfuge = yes
				}
				modifier = {
					add = 50
					has_espionage_asset_economy = yes
				}
				modifier = {
					factor = 0.5
					has_espionage_operation_flag = difficulty_easy
				}
				locked_random_list = {
					1 = { destroy_espionage_asset_subterfuge = yes }
					1 = { destroy_espionage_asset_economy = yes }
				}
			}
		}
		# Add negative modifier based on situation progress.
		if = {
			limit = {
				exists = event_target:operation_target
				exists = event_target:espionage_situation
				event_target:espionage_situation = { situation_progress < 80 }
			}
			event_target:operation_target = {
				if = {
					limit = { event_target:espionage_situation = { situation_progress > 70 } }
					add_modifier = {
						modifier = espsit_stolen_resources_10
						months = @StealResourcesAmountMonths
					}
				}
				else_if = {
					limit = { event_target:espionage_situation = { situation_progress > 60 } }
					add_modifier = {
						modifier = espsit_stolen_resources_10
						months = @StealResourcesAmountMonths
					}
				}
				else_if = {
					limit = { event_target:espionage_situation = { situation_progress > 50 } }
					add_modifier = {
						modifier = espsit_stolen_resources_20
						months = @StealResourcesAmountMonths
					}
				}
				else_if = {
					limit = { event_target:espionage_situation = { situation_progress > 40 } }
					add_modifier = {
						modifier = espsit_stolen_resources_30
						months = @StealResourcesAmountMonths
					}
				}
				else_if = {
					limit = { event_target:espionage_situation = { situation_progress > 30 } }
					add_modifier = {
						modifier = espsit_stolen_resources_40
						months = @StealResourcesAmountMonths
					}
				}
				else_if = {
					limit = { event_target:espionage_situation = { situation_progress > 20 } }
					add_modifier = {
						modifier = espsit_stolen_resources_40
						months = @StealResourcesAmountMonths
					}
				}
				else_if = {
					limit = { event_target:espionage_situation = { situation_progress > 10 } }
					add_modifier = {
						modifier = espsit_stolen_resources_50
						months = @StealResourcesAmountMonths
					}
				}
				else = {
					add_modifier = {
						modifier = espsit_stolen_resources_50
						months = @StealResourcesAmountMonths
					}
				}
			}
		}
		# End this operation.
		destroy_espionage_operation = this
	}
}
